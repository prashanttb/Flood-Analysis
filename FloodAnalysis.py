# -*- coding: utf-8 -*-
"""
/***************************************************************************
 FloodAnalysis
                                 A QGIS plugin
 Flood Analysis
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2022-07-22
        git sha              : $Format:%H$
        copyright            : (C) 2022 by ptb
        email                : prashanttb151100@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction
from qgis.core import QgsProject, QgsFeature, QgsVectorLayer,QgsField
from qgis.PyQt.QtCore import QVariant
from PyQt5.QtGui import QPainter, QColor, QPen

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .FloodAnalysis_dialog import FloodAnalysisDialog
import os.path


class FloodAnalysis:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'FloodAnalysis_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Flood Analysis')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('FloodAnalysis', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToVectorMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/FloodAnalysis/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Flood Analysis'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginVectorMenu(
                self.tr(u'&Flood Analysis'),
                action)
            self.iface.removeToolBarIcon(action)


    def run(self):
        """Run method that performs all the real work"""
        

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = FloodAnalysisDialog()

        layers = QgsProject.instance().layerTreeRoot().children()
        root = QgsProject.instance().layerTreeRoot()

        # select depth layer
        self.dlg.comboBox.clear()
        self.dlg.comboBox.addItems([layer.name() for layer in layers])

        # select waterlevel layer
        self.dlg.comboBox_2.clear()
        self.dlg.comboBox_2.addItems([layer.name() for layer in layers])

        # select ground height layer
        self.dlg.comboBox_3.clear()
        self.dlg.comboBox_3.addItems([layer.name() for layer in layers])

        # show the dialog
        self.dlg.show()

        # Run the dialog event loop
        result = self.dlg.exec_()

        # See if OK was pressed
        if result:
            selectedIndex1 = self.dlg.comboBox.currentIndex()
            selectedLayer1 = layers[selectedIndex1].layer()

            selectedIndex2 = self.dlg.comboBox_2.currentIndex()
            selectedLayer2 = layers[selectedIndex2].layer()

            selectedIndex3 = self.dlg.comboBox_3.currentIndex()
            selectedLayer3 = layers[selectedIndex3].layer()

            dist = []
            overflow=[]

            # creating an empty polygon layer with 2 fields
            vl = QgsVectorLayer("Polygon", "temp", "memory")
            vl.dataProvider().addAttributes([QgsField("height", QVariant.Double),QgsField("name", QVariant.String)])
            vl.updateFields() 

            # iterating over all channel depths
            for l in selectedLayer1.getFeatures():
                dist=[]
                geom1 = l.geometry()

                ''' iterating over water levels to see if it overflows the nearest channel depth '''
                for j in selectedLayer2.getFeatures():
                    geom2 = j.geometry()
                    d = geom1.distance(geom2)
                    dist.append({'distance':d,'name':j['name'],'level':j['level']})
                
                dists = [ x['distance'] for x in dist ]
                names = [ x['name'] for x in dist ]
                levels = [ x['level'] for x in dist ]

                index = dists.index(min(dists))
                if l['depth']<levels[index]:

                    ''' new feature object to be added in new layer '''
                    feat = QgsFeature()
                    overflow.append(l['name'])

                    ''' iterating over the layers to see if it is 
                    flooded by the nearest overflowed channel depth'''
                    for k in selectedLayer3.getFeatures():
                        if k.geometry().intersects(l.geometry()) and levels[index]>k['height']:
                            #print("{} {}".format(l['name'],k['name']))

                            # adding attributes and geometry to the feature
                            feat.setAttributes([k['height'],k['name']])
                            feat.setGeometry(k.geometry())
                            vl.dataProvider().addFeature(feat)
                            vl.updateExtents() 
                            
                    ''' iterating over the layers to see if it is 
                    flooded by the nearest flooded polygon'''
                    for k in selectedLayer3.getFeatures():
                        for p in vl.getFeatures():
                            if k.geometry().intersects(p.geometry()) and k['height']<=p['height'] and k['name']!=p['name'] and p['name'] not in vl.getFeatures():
                                #print("{} {}".format(p['name'],k['name']))
                                
                                # adding attributes and geometry to the feature
                                feat.setAttributes([k['height'],k['name']])
                                feat.setGeometry(k.geometry())
                                vl.dataProvider().addFeature(feat)
                                vl.updateExtents() 
                        
            #print(overflow)

            QgsProject.instance().addMapLayer(vl)
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            pass
